// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("MEMBER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rosesManaged    Rose[]
  roseMemberships RoseMembership[]
}

model Rose {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  zelatorId String
  zelator   User   @relation(fields: [zelatorId], references: [id])

  members RoseMembership[]

  // NOWE POLE: Offset rotacji dla tej Róży (0 do 19)
  // Będzie inkrementowany co miesiąc.
  currentRotationOffset Int @default(0) 
}

model RoseMembership {
  id        String   @id @default(cuid())
  userId    String
  roseId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currentAssignedMystery String?
  mysteryConfirmedAt     DateTime?
  
  // NOWE/ZAKTUALIZOWANE OPCJONALNE POLE:
  mysteryOrderIndex      Int? // Pozycja członka w Róży (0-19) dla rotacji tajemnic

  user User @relation(fields: [userId], references: [id])
  rose Rose @relation(fields: [roseId], references: [id])

  mysteryHistory AssignedMysteryHistory[]

  @@unique([userId, roseId])
  @@index([roseId, mysteryOrderIndex]) // Opcjonalny indeks
}

model AssignedMysteryHistory {
  id            String   @id @default(cuid())
  membershipId  String
  mystery       String
  assignedMonth Int
  assignedYear  Int
  assignedAt    DateTime @default(now())

  membership RoseMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([membershipId])
}