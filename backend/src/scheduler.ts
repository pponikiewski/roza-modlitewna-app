// backend/src/scheduler.ts
import cron from 'node-cron';
import { assignMysteriesToAllRoses } from './services/rosary.service';

// Set do ≈õledzenia ju≈º wykonanych zada≈Ñ (zapobiega wielokrotnemu uruchomieniu)
const executedTasks = new Set<string>();

/**
 * Sprawdza czy podana data jest pierwszƒÖ niedzielƒÖ miesiƒÖca
 * @param date - data do sprawdzenia (domy≈õlnie dzisiaj)
 * @param timezone - strefa czasowa (domy≈õlnie lokalna)
 */
function isFirstSundayOfMonth(date?: Date, timezone: string = 'Europe/Warsaw'): boolean {
  try {
    const checkDate = date || new Date();
    
    // Konwertuj na polskƒÖ strefƒô czasowƒÖ
    const localDate = new Date(checkDate.toLocaleString('en-US', { timeZone: timezone }));
    
    // Sprawd≈∫ czy to niedziela (0 = niedziela)
    if (localDate.getDay() !== 0) {
      return false;
    }
    
    // Pierwsza niedziela miesiƒÖca mo≈ºe wypa≈õƒá miƒôdzy 1. a 7. dniem miesiƒÖca
    const dayOfMonth = localDate.getDate();
    return dayOfMonth >= 1 && dayOfMonth <= 7;
  } catch (error) {
    console.error('B≈ÇƒÖd podczas sprawdzania pierwszej niedzieli:', error);
    return false;
  }
}

/**
 * Znajduje pierwszƒÖ niedzielƒô w danym miesiƒÖcu
 * @param year - rok
 * @param month - miesiƒÖc (0-indexed: 0 = stycze≈Ñ, 11 = grudzie≈Ñ)
 * @param timezone - strefa czasowa
 */
function getFirstSundayOfMonth(year: number, month: number, timezone: string = 'Europe/Warsaw'): Date {
  try {
    // Pierwszy dzie≈Ñ miesiƒÖca w danej strefie czasowej
    const firstDay = new Date();
    firstDay.setFullYear(year, month, 1);
    firstDay.setHours(0, 0, 0, 0);
    
    const localFirstDay = new Date(firstDay.toLocaleString('en-US', { timeZone: timezone }));
    const dayOfWeek = localFirstDay.getDay(); // 0 = niedziela, 1 = poniedzia≈Çek, ...
    
    // Oblicz ile dni dodaƒá do pierwszego dnia miesiƒÖca, ≈ºeby dotrzeƒá do niedzieli
    const daysToAdd = dayOfWeek === 0 ? 0 : 7 - dayOfWeek;
    
    return new Date(year, month, 1 + daysToAdd);
  } catch (error) {
    console.error('B≈ÇƒÖd podczas znajdowania pierwszej niedzieli:', error);
    throw error;
  }
}

/**
 * Sprawdza czy dzisiaj jest dok≈Çadnie pierwsza niedziela miesiƒÖca
 * @param timezone - strefa czasowa
 */
function isTodayFirstSundayOfMonth(timezone: string = 'Europe/Warsaw'): boolean {
  try {
    const now = new Date();
    const localNow = new Date(now.toLocaleString('en-US', { timeZone: timezone }));
    
    const year = localNow.getFullYear();
    const month = localNow.getMonth();
    const day = localNow.getDate();
    
    const firstSunday = getFirstSundayOfMonth(year, month, timezone);
    const firstSundayLocal = new Date(firstSunday.toLocaleString('en-US', { timeZone: timezone }));
    
    // Por√≥wnaj daty (rok, miesiƒÖc, dzie≈Ñ)
    return localNow.getFullYear() === firstSundayLocal.getFullYear() &&
           localNow.getMonth() === firstSundayLocal.getMonth() &&
           localNow.getDate() === firstSundayLocal.getDate();
  } catch (error) {
    console.error('B≈ÇƒÖd podczas sprawdzania czy dzisiaj jest pierwsza niedziela:', error);
    return false;
  }
}

/**
 * Tworzy unikalny klucz dla zadania na podstawie daty
 */
function getTaskKey(date: Date): string {
  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;
}

/**
 * Wykonuje przydzielanie tajemnic r√≥≈ºa≈Ñca z zabezpieczeniami
 */
async function executeRosaryAssignment(): Promise<void> {
  const now = new Date();
  const taskKey = getTaskKey(now);
  
  // Sprawd≈∫ czy zadanie ju≈º zosta≈Ço wykonane dzi≈õ
  if (executedTasks.has(taskKey)) {
    console.log(`[${now.toISOString()}] Zadanie ju≈º zosta≈Ço wykonane dzi≈õ (${taskKey}). Pomijanie.`);
    return;
  }
  
  console.log(`[${now.toISOString()}] Jest pierwsza niedziela miesiƒÖca. Uruchamianie przydzielania tajemnic dla wszystkich R√≥≈º...`);
  
  try {
    await assignMysteriesToAllRoses();
    
    // Oznacz zadanie jako wykonane
    executedTasks.add(taskKey);
    
    // Czy≈õƒá stare wpisy (zachowuj tylko z ostatnich 7 dni)
    cleanupExecutedTasks();
    
    console.log(`[${now.toISOString()}] ‚úÖ Pomy≈õlnie zako≈Ñczono cykl przydzielania tajemnic dla R√≥≈º.`);
  } catch (error) {
    console.error(`[${now.toISOString()}] ‚ùå B≈ÇƒÖd podczas automatycznego przydzielania tajemnic dla R√≥≈º:`, error);
    
    // Opcjonalnie: wy≈õlij powiadomienie o b≈Çƒôdzie do administratora
    // await notifyAdmin('B≈ÇƒÖd schedulera r√≥≈ºa≈Ñca', error);
    
    throw error; // Re-throw dla dalszego handling
  }
}

/**
 * Czy≈õci stare wpisy z executedTasks
 */
function cleanupExecutedTasks(): void {
  const now = new Date();
  const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
  
  for (const taskKey of executedTasks) {
    const [year, month, day] = taskKey.split('-').map(Number);
    const taskDate = new Date(year, month - 1, day);
    
    if (taskDate < sevenDaysAgo) {
      executedTasks.delete(taskKey);
    }
  }
}

/**
 * Handler zadania cron
 */
async function handleCronTask(): Promise<void> {
  const now = new Date();
  console.log(`[${now.toISOString()}] üîÑ Uruchomiono zadanie cron w niedzielƒô.`);

  try {
    if (isTodayFirstSundayOfMonth()) {
      await executeRosaryAssignment();
    } else {
      console.log(`[${now.toISOString()}] ‚ÑπÔ∏è  Dzisiaj nie jest pierwsza niedziela miesiƒÖca. Pomijanie przydzielania tajemnic.`);
    }
  } catch (error) {
    console.error(`[${now.toISOString()}] ‚ùå B≈ÇƒÖd w handlerze cron:`, error);
  }
}

/**
 * G≈Ç√≥wna funkcja uruchamiajƒÖca scheduler
 */
export function startScheduler(): void {
  console.log('üöÄ Inicjalizacja schedulera r√≥≈ºa≈Ñca...');
  
  // Test funkcji (mo≈ºna odkomentowaƒá do debugowania)
  if (process.env.NODE_ENV === 'development') {
    const today = new Date();
    console.log(`üìÖ Dzisiaj (${today.toLocaleDateString('pl-PL')}): ${isTodayFirstSundayOfMonth() ? '‚úÖ Jest' : '‚ùå Nie jest'} pierwszƒÖ niedzielƒÖ miesiƒÖca`);
  }

  try {
    // Sprawd≈∫ czy cron pattern jest poprawny
    const cronPattern = '0 1 * * 0'; // Ka≈ºda niedziela o 01:00
    if (!cron.validate(cronPattern)) {
      throw new Error(`Niepoprawny cron pattern: ${cronPattern}`);
    }

    // Utw√≥rz zadanie cron
    const task = cron.schedule(cronPattern, handleCronTask, {
      timezone: 'Europe/Warsaw' // Ustaw polskƒÖ strefƒô czasowƒÖ
    });
    
    console.log('‚úÖ Scheduler skonfigurowany pomy≈õlnie:');
    console.log(`   - Wzorzec: ${cronPattern} (ka≈ºda niedziela o 01:00)`);
    console.log(`   - Strefa czasowa: Europe/Warsaw`);
    console.log(`   - Status: ${task.getStatus()}`);
    
    // Opcjonalna informacja o nastƒôpnym uruchomieniu
    const nextSunday = getNextSunday();
    console.log(`   - Nastƒôpne uruchomienie: ${nextSunday.toLocaleString('pl-PL')}`);
    
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas konfiguracji cron schedulera:', error);
    console.log('üîÑ Prze≈ÇƒÖczanie na alternatywny scheduler...');
    
    // Fallback na alternatywny scheduler
    startAlternativeScheduler();
  }
}

/**
 * Znajduje najbli≈ºszƒÖ niedzielƒô
 */
function getNextSunday(): Date {
  const today = new Date();
  const daysUntilSunday = (7 - today.getDay()) % 7;
  const nextSunday = new Date(today);
  nextSunday.setDate(today.getDate() + (daysUntilSunday === 0 ? 7 : daysUntilSunday));
  nextSunday.setHours(1, 0, 0, 0); // Ustaw na 01:00
  return nextSunday;
}

/**
 * Alternatywny scheduler u≈ºywajƒÖcy setTimeout jako fallback
 */
function startAlternativeScheduler(): void {
  console.log('üîÑ Uruchomiono alternatywny scheduler...');
  
  function scheduleNextCheck(): void {
    const now = new Date();
    const nextSunday = getNextSunday();
    const timeUntilNextSunday = nextSunday.getTime() - now.getTime();
    
    console.log(`‚è∞ Nastƒôpne sprawdzenie: ${nextSunday.toLocaleString('pl-PL')}`);
    
    setTimeout(async () => {
      try {
        await handleCronTask();
      } catch (error) {
        console.error('‚ùå B≈ÇƒÖd w alternatywnym schedulerze:', error);
      }
      
      // Zaplanuj nastƒôpne sprawdzenie
      scheduleNextCheck();
    }, timeUntilNextSunday);
  }
  
  scheduleNextCheck();
}



/**
 * Funkcja do manualnego uruchomienia zadania (do test√≥w)
 */
export async function runManualTask(): Promise<void> {
  console.log('üîß Manualne uruchomienie zadania schedulera...');
  try {
    await executeRosaryAssignment();
    console.log('‚úÖ Manualne zadanie zako≈Ñczone pomy≈õlnie');
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas manualnego uruchomienia:', error);
    throw error;
  }
}

// Eksportowane funkcje do testowania
export { 
  isFirstSundayOfMonth, 
  getFirstSundayOfMonth, 
  isTodayFirstSundayOfMonth,
  getTaskKey,
  cleanupExecutedTasks
};